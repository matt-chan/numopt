# Specify the virtual environment
dist: trusty
sudo: true


# Specify the project language and the compiler to test to
language: cpp
compiler: gcc


# Enable Slack notifications, disable e-mail
notifications:
    slack: gqcg:5PZ5ibXCwNU1b5ToWbHVIqnI
    email: false

before_cache:
  - rm -rf $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history
  - pip uninstall -y cardboardlint

# Cache miniconda for faster build procedures
cache:
  directories:
    $HOME/miniconda
    $HOME/download

before_install:
  # Install Miniconda
  - if [ -d $HOME/miniconda/bin ]; then
      echo "Miniconda already installed.";
    else
      echo "Installing miniconda.";
      rm -rf $HOME/miniconda;
      mkdir -p $HOME/download;
      if [[ "${TRAVIS_PYTHON_VERSION}" == "2.7" ]]; then
        wget wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
      bash $HOME/download/miniconda.sh -b -p ${HOME}/miniconda;
    fi

# Install dependencies
install:

  # Configure conda
  - source $HOME/miniconda/bin/activate
  - hash -r
  - conda config --set always_yes yes --set changeps1 no

  # Install a recent version of CMake, Boost and eigen if they are not yet already installed.
  - if [ ! -f $HOME/miniconda/bin/cmake ]; then
      conda install -c conda-forge cmake boost-cpp eigen;
    else
      echo "Using already installed packages.";
    fi
  - export BOOST_ROOT=${HOME}/miniconda/include

  # Install the latest version of the cpputil library
  - mkdir /tmp/cpputil && cd /tmp/cpputil
  - git clone https://github.com/GQCG/cpputil.git --branch master --single-branch
  - cd cpputil
  - mkdir build && cd build
  - cmake .. && make -j3 && make test ARGS=-j3 && sudo make install


# Run the build script
script:
  - cd /home/travis/build/GQCG/numopt
  - mkdir build && cd build
  - cmake ..
  - make -j3 && make test ARGS=-j3 && sudo make install

